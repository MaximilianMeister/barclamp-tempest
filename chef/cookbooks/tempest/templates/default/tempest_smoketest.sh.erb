#!/bin/bash

export OS_AUTH_URL=http://<%= @key_host %>:<%= @key_port %>/v2.0/
export OS_AUTH_STRATEGY=keystone

username=<%= @comp_user %>
password=<%= @comp_pass %>
tenant_name=<%= @comp_tenant %>

alt_username=<%= @alt_comp_user %>
alt_password=<%= @alt_comp_pass %>
alt_tenant_name=<%= @alt_comp_tenant %>

admin_username=<%= @comp_admin_user %>
admin_password=<%= @comp_admin_pass %>
admin_tenant_name=<%= @comp_admin_tenant %>

#s3 test preparation
cert_dir=<%= @euca_key_dir %>
mkdir -p ${cert_dir}

export EC2_PRIVATE_KEY=<%= @ec2_private_key %>
export EC2_CERT=<%= @ec2_cert %>
export EUCALYPTUS_CERT=<%= @ec2_eucalyptus_cert %>
export OS_USERNAME=${username}
export OS_PASSWORD=${password}
export OS_TENANT_NAME=${tenant_name}
export EC2_USER_ID=${username}

die() {
    res=$1
    shift
    echo -e "\n$@\n"
    exit $res
}

admin_user_id=$(keystone --os-username ${admin_username} --os-password ${admin_password} --os-tenant-name ${admin_tenant_name} user-list | grep "${admin_username}" | awk {'print $2'})
admin_role_id=$(keystone --os-username ${admin_username} --os-password ${admin_password} --os-tenant-name ${admin_tenant_name} role-list | grep "${admin_username}" | awk {'print $2'})
tempest_tenant_id=$(keystone --os-username ${admin_username} --os-password ${admin_password} --os-tenant-name ${admin_tenant_name} tenant-list | grep "${tenant_name}" | awk {'print $2'})

[[ $tempest_tenant_id  ]] || die 1 "ERROR: No tempest tenant found, aborting tempest run"

tempest_user_id=$(keystone --os-username ${admin_username} --os-password ${admin_password} --os-tenant-name ${admin_tenant_name} user-list | grep "${username}" | awk {'print $2'})
authorized_for=$(keystone  --os-username ${admin_username} --os-password ${admin_password} --os-tenant-name ${admin_tenant_name} user-role-list --user-id $tempest_user_id --tenant-id $tempest_tenant_id | grep $tempest_tenant_id | awk {'print $8'})

[[ $authorized_for = $tempest_tenant_id  ]] || die 1 "ERROR: [ $username : $tempest_user_id ] is not authorized for [ $tenant_name : $tempest_tenant_id ]"

(
if [[ "$(keystone --os-username ${admin_username} --os-password ${admin_password} --os-tenant-name ${admin_tenant_name} user-role-list --user-id ${admin_user_id} --tenant-id ${tempest_tenant_id} | grep "${admin_username}" | awk {'print $2'})" == "${admin_role_id}" ]]; then
    echo -e "User ${admin_user_id} is authorized in ${tempest_tenant_id}"
else
    echo -e "Authorizing user ${admin_user_id} in ${tempest_tenant_id} with role ${admin_role_id}"
    keystone --os-username ${admin_username} --os-password ${admin_password} --os-tenant-name ${admin_tenant_name} user-role-add --user-id ${admin_user_id} --tenant-id ${tempest_tenant_id} --role-id ${admin_role_id} || exit 1
fi


if [ ! -f ${EUCALYPTUS_CERT} ]; then
    nova x509-get-root-cert "${EUCALYPTUS_CERT}"
    nova x509-create-cert "${EC2_PRIVATE_KEY}" "${EC2_CERT}"
else
   echo -e "EC2 auth data found, reusing it..."
fi
s3_materials_path=<%= @tempest_path %>/etc/cirros
euca-bundle-image -i ${s3_materials_path}/cirros-*-blank.img -d ${s3_materials_path}
euca-bundle-image -i ${s3_materials_path}/cirros-*-initrd --ramdisk true -d ${s3_materials_path}
euca-bundle-image -i ${s3_materials_path}/cirros-*-vmlinuz --kernel true -d ${s3_materials_path}
) 1>&2

<%= @nosetests %> -q --with-xunit --xunit-file=/dev/stdout -w /opt/tempest/ -v tempest
tresult=$?

### clean up in admin tenant
(
export OS_USERNAME=${admin_username}
export OS_PASSWORD=${admin_password}
export OS_TENANT_NAME=${admin_tenant_name}
echo -e "Cleaning up tenants, excluding tempest-service tenant ${tempest_tenant_id}"
for f in `keystone tenant-list | grep -v ${tempest_tenant_id}  | grep -E 'test_tenant_|tenant2-[0-9]*|tenant-new[0-9]*|tenant-[0-9]+|tenant-dup-[0-9]+' | awk '{print $2}'` ; do  echo -e "Deleting tenant: $f" ; keystone tenant-delete $f ; done
echo -e "Cleaning up users..."
for f in `keystone user-list | grep -E 'test_user_[0-9]+' | awk '{print $2}'` ; do keystone user-delete $f ; done
echo -e "Cleaning up roles..."
for f in `keystone role-list | grep -E 'role[0-9]+|role-[0-9]+' | awk '{print $2}'` ; do keystone role-delete $f ; done
echo -e "Cleaning up services..."
for f in `keystone service-list | grep -E 'service-[0-9]+' | awk '{print $2}'` ; do keystone service-delete $f ; done
echo -e "Cleaning up security-groups..."
for f in `neutron security-group-list | grep -v default | grep -v '\-\{5\}' | grep -v 'id.*name.*description' | awk '{print $2}'` ; do neutron security-group-delete $f ; done
echo -e "Cleaning up images..."
for f in `nova image-list | grep -E '.image[0-9]+' | awk {'print $2'}`; do nova image-delete $f ; done
) 1>&2

#clean up in tempest tenant
(
export OS_USERNAME=${username}
export OS_PASSWORD=${password}
export OS_TENANT_NAME=${tenant_name}
echo -e "Cleaning up security-groups..."
for f in `neutron security-group-list | grep -v default | grep -v '\-\{5\}' | grep -v 'id.*name.*description' | awk '{print $2}'` ; do neutron security-group-delete $f ; done
echo -e "Cleaning up volume snapshots..."
for f in `nova volume-snapshot-list | awk {'print $2'} | grep -v '^ID$' | grep -v '^$'` ; do nova volume-snapshot-delete $f ; done
echo -e "Cleaning up volumes..."
for f in `nova volume-list | awk {'print $2'} | grep -v '^ID$' | grep -v '^$'` ; do nova volume-delete $f ; done
echo -e "Cleaning up flavors..."
for f in `nova flavor-list | grep -E 'test_flavor_[0-9]+' | awk '{print $2}'` ; do nova flavor-delete $f ; done
echo -e "Cleaning up instances..."
for f in `nova list | awk '{print $2}' | grep -v '^ID$' | grep -v '^$'` ; do nova delete $f ; done

declare -a routers ports nets images
for n in `neutron net-list | grep 'test-network-[0-9].*$' | awk {'print $2'}`; do echo "Junk network found: $n" && nets=("${nets[@]}" "$n"); done || echo -e "No junk routers found"
for r in `neutron router-list | grep 'router-[0-9].*$' | awk {'print $2'}`; do echo "Junk router found: $r" && routers=("${routers[@]}" "$r"); done || echo -e "No junk routers found"
for i in `glance image-list | grep 'aki-name-[0-9].*\|ari-name-[0-9].*\|ami-name-[0-9].*' | awk {'print $2'}`; do echo "Junk image found: $i" && images=("${images[@]}" "$i"); done || echo -e "No junk images found"

if [[ $routers ]]; then
	for r in "${routers[@]}"; do
                for x in `neutron router-port-list $r | grep 'subnet_id.*' | awk {'print $8'} | sed 's/,//g' | sed 's/\"//g'`; do echo "Junk port found: $x" && ports=("${ports[@]}" "$x"); done || echo -e "No junk ports found"
                if [[ $ports ]]; then
                        for p in "${ports[@]}"; do
                                echo -e "Deleting port $p for router $r"
                                neutron router-interface-delete $r $p  || continue
                        done
                else
                        echo -e "No junk ports found, deleting router"
                        neutron router-delete $r

                fi
        done
else
        echo -e "No junk routers found"
fi

if [[ $nets ]]; then
        for n in "${nets[@]}"; do
                echo -e "Deleting network $n"
                neutron net-delete $n
        done
else
        echo -e "No junk networks found"
fi

if [[ $images ]]; then
        for i in "${images[@]}"; do
                echo -e "Deleting glance image $i"
                glance image-delete $i
        done
else
        echo -e "No junk glance images found"
fi

echo -e "Cleaning up floating ips..."
for f in `neutron floatingip-list | awk {'print $2'}`; do neutron floatingip-delete $f ; done
)  1>&2

exit ${tresult}

